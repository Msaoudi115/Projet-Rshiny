brutToNet2 = function(salaire_brut,contrat) {
if(contrat == 'cadre') {
cotis = 0.25
calcul <- salaire_brut * (1-cotis)*0.925
return (calcul)}
if(contrat == 'non-cadres') {
cotis = 0.22
calcul <- salaire_brut * (1-cotis)*0.925
return (calcul)}
if((contrat != 'cadre') | (contrat != 'non-cadres')) {
stop('ERROR : contract unknown')}
}
brutToNet2 = function(salaire_brut,contrat) {
if(contrat == 'cadre') {
cotis = 0.25
calcul <- salaire_brut * (1-cotis)*0.925
return (calcul)}
if(contrat == 'non-cadres') {
cotis = 0.22
calcul <- salaire_brut * (1-cotis)*0.925
return (calcul)}
if((contrat != 'cadre') | (contrat != 'non-cadres')) {
stop('ERROR : contract unknown')}
}
brutToNet2 = function(salaire_brut,contrat) {
if(contrat == 'cadre') {
cotis = 0.25
calcul <- salaire_brut * (1-cotis)*0.925
return (calcul)}
if(contrat == 'non-cadres') {
cotis = 0.22
calcul <- salaire_brut * (1-cotis)*0.925
return (calcul)}
if((contrat != 'cadre') | (contrat != 'non-cadres')) {
stop('ERROR : contract unknown')}
}
brutToNet2 = function(salaire_brut,contrat) {
if(contrat == 'cadre') {
cotis = 0.25
calcul <- salaire_brut * (1-cotis)*0.925
return (calcul)}
if(contrat == 'non-cadres') {
cotis = 0.22
calcul <- salaire_brut * (1-cotis)*0.925
return (calcul)}
if((contrat != 'cadre') | (contrat != 'non-cadres')) {
stop('ERROR : contract unknown')}
}
brutToNet2 = function(salaire_brut,contrat) {
if(contrat == 'cadre') {
cotis = 0.25
calcul <- salaire_brut * (1-cotis)*0.925
return (calcul)}
if(contrat == 'non-cadres') {
cotis = 0.22
calcul <- salaire_brut * (1-cotis)*0.925
return (calcul)}
if((contrat != 'cadre') | (contrat != 'non-cadres')) {
stop('ERROR : contract unknown')}
}
brutToNet2 = function(salaire_brut,contrat) {
if(contrat == 'cadre') {
cotis = 0.25
calcul <- salaire_brut * (1-cotis)*0.925
return (calcul)}
if(contrat == 'non-cadres') {
cotis = 0.22
calcul <- salaire_brut * (1-cotis)*0.925
return (calcul)}
if((contrat != 'cadre') | (contrat != 'non-cadres')) {
stop('ERROR : contract unknown')}
}
brutToNet3 = function(salaire_brut,contrat,tauxprelevement=7.5,tempstravail=100) {
if(contrat == 'cadre') {
cotis = 0.25}
if(contrat == 'non-cadres') {
cotis = 0.22}
calcul <- salaire_brut * (1-cotis)*(1-tauxprelevement/100)
return (calcul)
if((contrat != 'cadre') | (contrat != 'non-cadres')) {
stop('ERROR : contract unknown')}
}
brutToNet3(as.integer(readline(prompt="Entrez un salaire")),readline(prompt="Entrez un type de contrat"))
brutToNet3 = function(salaire_brut,contrat,tauxprelevement=7.5,tempstravail=100) {
{if(tauxprelevement<0||tauxprelevement>100||tempstravail<0||tempstravail>100)
stop('ERROR:rate and time must be in range(0,100)')}
if(contrat == 'cadre') {
cotis = 0.25}
if(contrat == 'non-cadres') {
cotis = 0.22}
calcul <- salaire_brut * (1-cotis)*(1-tauxprelevement/100)
return (calcul)
if((contrat != 'cadre') | (contrat != 'non-cadres')) {
stop('ERROR : contract unknown')}
}
brutToNet3(as.integer(readline(prompt="Entrez un salaire")),readline(prompt="Entrez un type de contrat"))
brutToNet3 = function(salaire_brut,contrat,tauxprelevement=7.5,tempstravail=100) {
{if(tauxprelevement<0||tauxprelevement>100||tempstravail<0||tempstravail>100)
stop('ERROR:rate and time must be in range(0,100)')}
if(contrat == 'cadre') {
cotis = 0.25}
if(contrat == 'non-cadres') {
cotis = 0.22}
salaire_net <- salaire_brut * (1-cotis)*(1-tauxprelevement/100)*(tempstravail/100)
print(paste(" le salaire net avant impots ",salaire_brut))
print(paste(" le salaire net apres impots  ",salaire_net))
return (calcul)
if((contrat != 'cadre') | (contrat != 'non-cadres')) {
stop('ERROR : contract unknown')}
}
brutToNet3(as.integer(readline(prompt="Entrez un salaire")),readline(prompt="Entrez un type de contrat"))
brutToNet3 = function(salaire_brut,contrat,tauxprelevement=7.5,tempstravail=100) {
{if(tauxprelevement<0||tauxprelevement>100||tempstravail<0||tempstravail>100)
stop('ERROR:rate and time must be in range(0,100)')}
if(contrat == 'cadre') {
cotis = 0.25}
if(contrat == 'non-cadres') {
cotis = 0.22}
salaire_net <- salaire_brut * (1-cotis)*(1-tauxprelevement/100)*(tempstravail/100)
print(paste(" le salaire net avant impots ",salaire_brut))
print(paste(" le salaire net apres impots  ",salaire_net))
return (salaire_net)
brutToNet3(as.integer(readline(prompt="Entrez un salaire")),readline(prompt="Entrez un type de contrat"))
cadre
2500
brutToNet3(as.integer(readline(prompt="Entrez un salaire")),readline(prompt="Entrez un type de contrat"))
brutToNet3 = function(salaire_brut,contrat,tauxprelevement=7.5,tempstravail=100) {
{if(tauxprelevement<0||tauxprelevement>100||tempstravail<0||tempstravail>100)
stop('ERROR:rate and time must be in range(0,100)')}
if(contrat == 'cadre') {
cotis = 0.25}
if(contrat == 'non-cadres') {
cotis = 0.22}
salaire_net <- salaire_brut * (1-cotis)*(1-tauxprelevement/100)*(tempstravail/100)
print(paste(" le salaire net avant impots ",salaire_brut))
print(paste(" le salaire net apres impots  ",salaire_net))
return (salaire_net)
if((contrat != 'cadre') | (contrat != 'non-cadres')) {
stop('ERROR : contract unknown')}
}
brutToNet3(as.integer(readline(prompt="Entrez un salaire")),readline(prompt="Entrez un type de contrat"))
brutToNet3(as.integer(readline(prompt="Entrez un salaire")),readline(prompt="Entrez un type de contrat"))
brutToNet3(as.integer(readline(prompt="Entrez un salaire")),readline(prompt="Entrez un type de contrat"),as.integer(readline(prompt="Entrez un taux de prelevement (facultatif)")),as.integer(readline(prompt="Entrez un temps de travail (facultatif)")))
brutToNet3 = function(salaire_brut,contrat,tauxprelevement=7.5,tempstravail=100) {
{if(tauxprelevement<0|tauxprelevement>100|tempstravail<0|tempstravail>100)
stop('ERROR:rate and time must be in range(0,100)')}
if(contrat == 'cadre') {
cotis = 0.25}
if(contrat == 'non-cadres') {
cotis = 0.22}
salaire_net <- salaire_brut * (1-cotis)*(1-tauxprelevement/100)*(tempstravail/100)
print(paste(" le salaire net avant impots est de",salaire_brut))
print(paste(" le salaire net apres impots est de",salaire_net))
return (salaire_net)
if((contrat != 'cadre') | (contrat != 'non-cadres')) {
stop('ERROR : contract unknown')}
}
brutToNet3(as.integer(readline(prompt="Entrez un salaire")),readline(prompt="Entrez un type de contrat"),as.integer(readline(prompt="Entrez un taux de prelevement (facultatif)")),as.integer(readline(prompt="Entrez un temps de travail (facultatif)")))
brutToNet3(as.integer(readline(prompt="Entrez un salaire")),readline(prompt="Entrez un type de contrat"),as.integer(readline(prompt="Entrez un taux de prelevement (facultatif)")),as.integer(readline(prompt="Entrez un temps de travail (facultatif)")))
brutToNet3(as.integer(readline(prompt="Entrez un salaire")),readline(prompt="Entrez un type de contrat"),as.integer(readline(prompt="Entrez un taux de prelevement (facultatif)")),as.integer(readline(prompt="Entrez un temps de travail (facultatif)")))
library(readxl)
install.packages("tidyverse")
library(readxl)
dataset <- read_excel(path  = "C:\Users\Person\Documents\GitHub\programmation_r\tp2\pokemon.xlsx")
dataset <- read_excel(path  = "C:\U\Person\Documents\GitHub\programmation_r\tp2\pokemon.xlsx")
dataset <- read_excel(path  = ".Documents\GitHub\programmation_r\tp2\pokemon.xlsx")
dataset <- read_excel(path  = ".\Documents\GitHub\programmation_r\tp2\pokemon.xlsx")
library(readxl)
pokemon <- read_excel("GitHub/programmation_r/tp2/pokemon.xlsx")
View(pokemon)
View(dataset)
View(pokemon)
write.csv
call
read_feather
View(pokemon)
View(pokemon)
View(pokemon)
read_xls()
read_xls("GitHub/programmation_r/tp2/pokemon.xlsx")
pokemon <- read_excel("GitHub/programmation_r/tp2/pokemon.xlsx")
View(pokemon)
read(pokemon)
library(readxl)
pokemon <- read_excel("GitHub/programmation_r/tp2/pokemon.xlsx")
read(pokemon)
pokemon <- read_excel("GitHub/programmation_r/tp2/pokemon.xlsx")
write(pokemon)
View(pokemon)
read(pokemon)
read(pokemon)
library(readxl)
pokemon <- read_excel("GitHub/programmation_r/tp2/pokemon.xlsx")
read(pokemon)
library(readxl)
pokemon <- read_excel("GitHub/programmation_r/tp2/pokemon.xlsx")
read(pokemon)
library(readxl)
pokemon <- read_excel("GitHub/programmation_r/tp2/pokemon.xlsx")
library(readxl)
pokemon <- read_excel("GitHub/programmation_r/tp2/pokemon.xlsx",pokemon)
library(readxl)
pokemon <- read_excel("GitHub/programmation_r/tp2/pokemon.xlsx",pokemon)
pokemon <- read_excel("GitHub/programmation_r/tp2/pokemon.xlsx"),pokemon
pokemon <- read_excel("GitHub/programmation_r/tp2/pokemon.xlsx"),pokemon
library(readxl)
pokemon <- read_excel("GitHub/programmation_r/tp2/pokemon.xlsx", sheet = "pokemon",)
library(readxl)
pokemon <- read_excel("GitHub/programmation_r/tp2/pokemon.xlsx", sheet = "pokemon",)
read_excel(pokemon)
library(readxl)
poke <- read_excel("GitHub/programmation_r/tp2/pokemon.xlsx", sheet = "pokemon",)
read_excel(poke)
library(readxl)
pokemon <- read_excel("GitHub/programmation_r/tp2/pokemon.xlsx", sheet = "pokemon",)
read_excel(poke)
library(readxl)
pokemon <- read_excel("GitHub/programmation_r/tp2/pokemon.xlsx", sheet = "pokemon",)
read_excel(pokemon, pokemon)
read_excel(pokemon, pokemon)
dim(x = pokemon)
names(pokemon)
str(pokemon)
pokemon$generation <- as.factor(x = pokemon$generation)
pokemon$generation <- as.factor(x = pokemon$generation)
class(x = pokemon$generation )
class(x = pokemon$nom )
pokemon$generation <- as.factor(x = pokemon$generation)
pokemon$is_legendary <- as.factor(x = pokemon$is_legendary)
pokemon$type <- as.factor(x = pokemon$type)
levels(generation)
levels(pokemon$generation)
levels(pokemon$generation)
levels(pokemon$is_legendary)
levels(pokemon$type)
summary(object = pokemon)
summary(pokemon)
pokemon$type <- as.factor(pokemon$type)
dim(pokemon)
mean(pokemon$weight_kg)
moyenne poids = mean(pokemon$weight_kg)
moyenne poids <- mean(pokemon$weight_kg)
moyenne_poids <- mean(pokemon$weight_kg)
moyenne_poids = mean(pokemon$weight_kg)
attach(pokemon)
moyenne_poids = mean(weight_kg)
mean(weight_kg)
mean(weight_kg, na.rm=TRUE)
generation <- as.factor(generation)
attach(pokemon)
attach(pokemon)
generation <- as.factor(generation)
levels(generation)
mean(weight_kg, na.rm=TRUE)
summary(pokemon)
median(weight_kg, na.rm=TRUE)
quantile(height_m, na.rm = TRUE)
decile(height_m, na.rm = TRUE)
decil(height_m, na.rm = TRUE)
decil(height_m, seq(0,1,0.1), na.rm = TRUE)
quantile(height_m, seq(0,1,0.1), na.rm = TRUE)
quantile(height_m, seq(0,1,1), na.rm = TRUE)
quantile(height_m, seq(1,0,1), na.rm = TRUE)
quantile(height_m, seq(0.1,0,1), na.rm = TRUE)
quantile(height_m, seq(1,0), na.rm = TRUE)
quantile(height_m, seq(0,1,0.1), na.rm = TRUE)
var(weight_kg)
var(weight_kg, na.rm = TRUE)
sd(weight_kg, na.rm = TRUE)
Filter(is.factor, pokemon)
generation <- as.factor(generation)
is_legendary <- as.factor(is_legendary)
type <- as.factor(type)
class(generation)
names(Filter(is.factor, pokemon))
factor_columns = names(Filter(is.factor, pokemon))
aggregate(generation)
aggregate(generation, FUN=length)
aggregate(pokemon, by = generation, FUN=length)
requete_a = pokemon[nom,is_legendary]
requete_0 <- pokemon[,1:2]
dim(requete_0)
View(requete_0)
requete_0 <- pokemon[,1:3]
requete_0 <- pokemon[]
requete_0 <- pokemon[1]
requete_0 <- pokemon[2]
requete_0 <- pokemon[2],pokemon[4]
requete_0 <- pokemon[2] and pokemon[4]
requete_0 <- pokemon[2,4]
requete_0 <- pokemon[2;4]
requete_0 <- pokemon[2:4]
requete_0 <- pokemon[2, 4]
requete_0 <- pokemon[2: 4]
requete_0 <- select(1,3)
requete_0 <- select(1,3)
requete_0 <- pokemon[,c(2, 4)]
requete_0 <- pokemon[,c(2, 4)]
requete_0 <- pokemon[,(2, 4)]
requete_0 <- pokemon[,(2, 4)]
requete_0 <- pokemon[,c(2, 4)]
requete_0 <- pokemon[c(2, 4)]
requete_0 <- pokemon[c(2, 4)]
requete_0 <- pokemon[c(2, 5)]
requete_a <- pokemon[c(2, 4)]
dim(requete_a)
View(requete_0)
#Exercice 1
library(readxl)
pokemon <- read_excel("GitHub/programmation_r/tp2/pokemon.xlsx", sheet = "pokemon",)
attach(pokemon)
dim(pokemon)
names(pokemon)
str(pokemon)
generation <- as.factor(generation)
is_legendary <- as.factor(is_legendary)
type <- as.factor(type)
levels(generation)
levels(is_legendary)
levels(type)
summary(pokemon)
mean(weight_kg, na.rm=TRUE)
median(weight_kg, na.rm=TRUE)
quantile(height_m, na.rm = TRUE)
quantile(height_m, seq(0,1,0.1), na.rm = TRUE)
var(weight_kg, na.rm = TRUE)
sd(weight_kg, na.rm = TRUE)
requete_a <- pokemon[c(2, 4)]
dim(requete_a)
requete_a <- pokemon[c('nom', 'is_legendary')]
requete_a <- pokemon[c('nom', 'is_legendary')]
dim(requete_a)
View(requete_a)
pokemon['Bulbizzare']
pokemon['nom']
requete_a_lignes = 0:50
View(requete_a)
requete_a_lignes = 0:49
requete_a_colonnes = pokemon[c('nom', 'is_legendary')]
requete_a_lignes = 0:49
requete_a = pokemon[requete_a_colonnes, requete_a_lignes]
requete_a = c('nom', 'is_legendary')
requete_a = c('nom', 'is_legendary')
requete_a = c('nom', 'is_legendary')
requete_a = c('nom', 'is_legendary')
requete_a = c('nom', 'is_legendary')
requete_a = pokemon[c('nom', 'is_legendary')]
requete_b = fichier[1:50,1:2]
requete_b = pokemon[1:50,1:2]
View(requete_b)
requete_b = pokemon[1:50,1:2]
dim(requete_b)
requete_c = pokemon[1:10,]
requete_c = pokemon[1:10]
requete_c = pokemon[1:10,]
requete_d = pokemon[1:nb_c-1]
requete_d = pokemon[1:-1]
requete_d = pokemon[,-1]
requete_d = pokemon[,-1]
dim(requete_d)
requete_e = order(pokemon$nom)
requete_e = order(nom)
requete_e = order('nom')
requete_e = pokemon[]
requete_e = pokemon[]  order('nom')
requete_e = order(pokemon[,2],decreasing = FALSE)
requete_e1 = order(nom)
requete_e = pokemon[requete_e1]
requete_e = pokemon[1:10,requete_e1]
requete_e = pokemon[requete_e1,1:10]
View(requete_e)
requete_e1 = order(nom)
requete_e = pokemon[requete_e1,1:10]
dim(requete_e)
requete_f1 = order(weight_kg)
requete_f = pokemon[requete_f1,1:10]
View(requete_f)
requete_f1 = order(weight_kg, decreasing = TRUE)
requete_f = pokemon[requete_f1,1:10]
requete_f = pokemon[order(weight_kg, decreasing = TRUE),1:10]
View(requete_f)
requete_f = pokemon[order(desc(weight_kg)),1:10]
requete_g = pokemon[order(attack, decreasing = TRUE,speed, decreasing = FALSE),1:10]
requete_g = pokemon[order(attack, decreasing = TRUE,speed),1:10]
View(requete_g)
requete_g = pokemon[order(attack, decreasing = TRUE,speed, increasing = TRUE),1:10]
requete_g = pokemon[order(attack, decreasing = TRUE,speed),1:10]
requete_g1 = order(speed, decreasing = FALSE)
requete_g1 = order(speed, decreasing = FALSE)
requete_g = pokemon[order(attack, decreasing = TRUE,requete_g1),1:10]
requete_g1 = order(speed, decreasing = FALSE)
requete_g = pokemon[order(attack, decreasing = TRUE,requete_g1):10,1:10]
requete_0 <- pokemon[ pokemon$type == "fire", c("nom","type")]
dim(requete_0)
View(requete_0)
requete_a = pokemon[ attack >= 150 , c("nom","type")]
View(requete_a)
requete_a = pokemon[ attack >= 150 , c("nom","attack")]
View(requete_a)
requete_b = pokemon[ type %in% c("dragon","ghost","psychic","dark") , c("nom","type")]
View(requete_b)
requete_c = pokemon[ type == "fire" & attack >= 100, c("nom","type")]
View(requete_c)
requete_c = pokemon[ type == "fire" & attack >= 100, c("nom","type","attack")]
requete_d = pokemon[ speed <= 150 & speed >= 100, c("nom","speed")]
View(requete_d)
requete_g = pokemon[ weight_kg >=250, c("nom","weight_kg")]
View(requete_g)
requete_g = pokemon[ weight_kg >=250, na.rm = TRUE, c("nom","weight_kg")]
View(requete_g)
requete_g = pokemon[ weight_kg >=250, c("nom","weight_kg")]
View(requete_g)
View(requete_g)
requete_g = pokemon[ weight_kg >=250, c("nom","weight_kg"),na.rm = TRUE]
View(requete_g)
requete_g = pokemon[ na.rm = TRUE, weight_kg >=250, c("nom","weight_kg")]
View(requete_g)
# 1a
install.packages("read.csv")
df <- read.csv(file = "fastfood.csv", sep = "\t",dec = ",")
load("~/GitHub/programmation_r/TD 6/fastfood.csv")
df <- read.csv(file = "fastfood.csv", sep = "\t",dec = ",")
df <- read.csv(file = "fastfood.csv", sep = "\t",dec = ",")
for (colonne in colnames(df)) {
if(is.character(df[ , colonne ]) == TRUE) {
df[ , colonne ] <- as.factor(df[ , colonne ])
}}
df<-read.csv(file = "fastfood.csv",
header = TRUE, sep = "\t", dec = ",")
View(df)
df<-read.csv(file = "fastfood.csv",
header = TRUE, sep = "\t", dec = ",")
df<-read.csv(file = "fastfood.csv",
header = TRUE, sep = "\t", dec = ",")
df<-read.csv(file = "fastfood.csv",
header = TRUE, sep = "\t", dec = ",")
df<-read.csv(file = "fastfood.csv",
header = TRUE, sep = "\t", dec = ",")
df<-read.csv(file = "fastfood.csv",
header = TRUE, sep = "\t", dec = ",")
fastfood <- read.delim2("~/GitHub/programmation_r/TD 6/fastfood.csv")
View(fastfood)
df<-read.csv(file = "fastfood.csv",
header = TRUE, sep = "\t", dec = ",")
df<-read.csv(file = "fastfood.csv",
header = TRUE, sep = "\t", dec = ",")
View(fastfood)
source("~/GitHub/programmation_r/TD 6/TD 6.R")
load("~/GitHub/programmation_r/TD 6/fastfood.csv")
# 4c
plot(df$fat_value, df$saturated.fat_value, mean = "Plus grande correlation", col = "blue")
library(shiny); runApp('GitHub/Projet-Rshiny/ProjetR.2.R')
runApp('GitHub/Projet-Rshiny/ProjetR.2.R')
runApp('GitHub/Projet-Rshiny/ProjetR.2.R')
runApp('GitHub/Projet-Rshiny/ProjetR.2.R')
base<-'https://api.jcdecaux.com/vls/v1/stations?contract='
contract<-'Lyon'
key<-'&apiKey=b59e18c899829b0903cc948041c9286aecc68768'
API_URL<-paste0(base, contract, key)
raw_data<-GET(API_URL)
library(httr)
library(jsonlite)
library(RMySQL)
library(tidygeocoder)
library(tidyr)
library(dplyr)
base<-'https://api.jcdecaux.com/vls/v1/stations?contract='
contract<-'Lyon'
key<-'&apiKey=b59e18c899829b0903cc948041c9286aecc68768'
API_URL<-paste0(base, contract, key)
raw_data<-GET(API_URL)
station_list<-fromJSON(rawToChar(raw_data$content), flatten = TRUE)
adresse_station = read.csv("Excel.csv")
setwd("C:/Users/Person/Documents/GitHub/Projet-Rshiny")
adresse_station = read.csv("Excel.csv")
runApp('ProjetR.2.R')
runApp('ProjetR.2.R')
runApp('ProjetR.2.R')
runApp('ProjetR.2.R')
runApp('ProjetR.2.R')
runApp('ProjetR.2.R')
runApp('ProjetR.2.R')
runApp('ProjetR.2.R')
runApp('ProjetR.2.R')
runApp('ProjetR.2.R')
runApp('ProjetR.2.R')
runApp('ProjetR.2.R')
runApp('ProjetR.2.R')
runApp('ProjetR.2.R')
runApp('ProjetR.2.R')
runApp('ProjetR.2.R')
View(station_list)
View(station_list)
runApp('ProjetR.2.R')
runApp('ProjetR.2.R')
runApp('ProjetR.2.R')
runApp('ProjetR.2.R')
runApp('ProjetR.2.R')
runApp('ProjetR.2.R')
runApp('ProjetR.2.R')
View(adresse_station)
View(adresse_station)
merged_df <- left_join(station_list, adresse_station, by = "number")
View(merged_df)
merged_df <- join(station_list, adresse_station, by = "number")
merged_df <- outer_join(station_list, adresse_station, by = "number")
merged_df <- bind_cols(station_list, adresse_station %>%
select(-one_of(names(station_list)))
)
View(merged_df)
runApp('ProjetR.2.R')
library(shiny); runApp('ProjetR.2.R')
